# Generated by Django 2.2.2 on 2019-07-05 16:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': [('*', 'Authentication app admin'), ('user.*', 'User admin'), ('user.list', 'List users'), ('user.view_basic', "View users' non-address info"), ('user.view_address', "View users' address"), ('user.delete', 'Delete users'), ('group.*', 'Group admin'), ('group.list', 'List groups'), ('group.create', 'Add groups'), ('group.change', 'Change groups'), ('group.delete', 'Delete groups')],
                'managed': False,
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('subject_id', models.UUIDField(db_index=True, unique=True, verbose_name='subject id')),
                ('username', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='username')),
                ('pretty_username', models.CharField(help_text='Same as the username, but allows different letter cases.', max_length=50, unique=True, verbose_name='pretty username')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='If the user can use the admin panel.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='If the user can log into the site.', verbose_name='active status')),
                ('join_date', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='date joined')),
                ('delete_date', models.DateTimeField(blank=True, help_text='When the user was marked for deletion.', null=True, verbose_name='date joined')),
                ('is_name_public', models.BooleanField(default=False, help_text="If the user's name is public.", verbose_name='is name public')),
                ('is_seat_user_public', models.BooleanField(default=False, help_text="If the user will show publicly on seats it's assigned to.", verbose_name='is seat user public')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'default_permissions': ['view'],
            },
        ),
        migrations.CreateModel(
            name='GroupExtension',
            fields=[
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='extension', serialize=False, to='auth.Group', verbose_name='group')),
                ('description', models.CharField(blank=True, max_length=50, verbose_name='description')),
                ('is_superuser', models.BooleanField(default=False, help_text='If users have every permission.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='If users can log into the admin panel.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=False, help_text='If users can log into the site.', verbose_name='active status')),
            ],
            options={
                'default_permissions': ['view', 'change'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('gender', models.CharField(blank=True, max_length=20, null=True, verbose_name='gender')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='country')),
                ('postal_code', models.CharField(blank=True, max_length=10, null=True, verbose_name='postal code')),
                ('street_address', models.CharField(blank=True, max_length=100, null=True, verbose_name='street address')),
                ('membership_years', models.CharField(blank=True, help_text='Comma separated list of years the user has been a member of the organization.', max_length=500, null=True, verbose_name='membership years')),
                ('is_member', models.BooleanField(default=False, help_text='If the user is currently a member of the organization.', verbose_name='membership status')),
                ('is_age_public', models.BooleanField(default=False, help_text="If the user's age in years is public.", verbose_name='is age public')),
                ('is_gender_public', models.BooleanField(default=False, help_text="If the user's gender is public.", verbose_name='is gender public')),
            ],
            options={
                'default_permissions': ['view', 'change'],
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(check=models.Q(('is_active', True), models.Q(_negated=True, delete_date=None), _negated=True), name='user_user_not_both_active_and_deleted'),
        ),
    ]
