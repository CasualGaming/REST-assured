# Generated by Django 2.2.2 on 2019-06-26 03:19

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('event', '0001_initial'),
        ('ticket', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_code', models.CharField(help_text='Unique, non-empty area code for an area within a seating. Max 4 characters.', max_length=4, verbose_name='area code')),
            ],
        ),
        migrations.CreateModel(
            name='AreaLayout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_title', models.CharField(help_text='A short, non-unique title to show to users.', max_length=20, verbose_name='short title')),
                ('long_title', models.CharField(help_text='A long, unique title to show behind the scenes.', max_length=50, unique=True, verbose_name='long title')),
                ('background_url', models.URLField(blank=True, help_text='URL for the area background image containing walls, exits, etc.', verbose_name='background URL')),
                ('background_offset_right', models.FloatField(default=0, help_text='Offset in meters of the background image from the left. May be negative.', verbose_name='background offset right')),
                ('background_offset_down', models.FloatField(default=0, help_text='Offset in meters of the background image from the top. May be negative.', verbose_name='background offset down')),
                ('background_width', models.FloatField(help_text='Width in meters of the background image.', verbose_name='background width')),
                ('is_active', models.BooleanField(default=False, help_text='If this layout is currently available to users.', verbose_name='is active')),
            ],
            options={
                'permissions': [('area_layout.list', 'Can list layouts'), ('area_layout.view_inactive', 'Can view inactive layouts')],
            },
        ),
        migrations.CreateModel(
            name='Seating',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='seating', serialize=False, to='event.Event', verbose_name='event')),
                ('is_active', models.BooleanField(default=False, help_text='If this seating is currently available to users.', verbose_name='is active')),
            ],
            options={
                'permissions': [('seating.list', 'Can list seatings'), ('seating.view_inactive', 'Can view inactive seatings')],
            },
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.IntegerField(help_text='Row number in the area.', verbose_name='row number')),
                ('seat_number', models.IntegerField(help_text='Seat number in the row.', verbose_name='seat number')),
                ('is_reserved', models.BooleanField(default=False, help_text='If this seat can not be tied to a ticket.', verbose_name='is reserved')),
                ('area', models.ForeignKey(help_text='Area in the seating.', on_delete=django.db.models.deletion.PROTECT, related_name='seats', to='seating.Area', verbose_name='area')),
                ('assigned_ticket', models.ForeignKey(blank=True, help_text='Ticket tied to this seat if it is assigned.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seats', to='ticket.Ticket', verbose_name='assigned ticket')),
                ('seating', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='seats', to='seating.Seating', verbose_name='seating')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='RowTicketTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.IntegerField(help_text='Row number in the area layout.', verbose_name='row number')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rows', to='seating.Area', verbose_name='area')),
                ('ticket_type', models.ForeignKey(help_text='A ticket type available for this seating row.', on_delete=django.db.models.deletion.PROTECT, related_name='seating_rows', to='ticket.TicketType', verbose_name='ticket types')),
            ],
        ),
        migrations.CreateModel(
            name='RowLayout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.IntegerField(help_text='Unique, positive row number within the area.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='row number')),
                ('seat_count_horizontal', models.IntegerField(help_text='Number of seats in the horizontal dimension (stacked on the non-wide sides of seats).', verbose_name='horizontal seat count')),
                ('seat_count_vertical', models.IntegerField(help_text='Number of seats in the vertical dimension (stacked on the wide sides of seats).', verbose_name='vertical seat count')),
                ('offset_right', models.FloatField(default=0, help_text='Offset in meters from the left wrt. the area.', verbose_name='offset right')),
                ('offset_down', models.FloatField(default=0, help_text='Offset in meters from the top wrt. the area.', verbose_name='offset down')),
                ('rotation', models.IntegerField(default=0, help_text='Counter-clockwise rotation in degrees wrt. the area. Must be in range [0, 360).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(359)], verbose_name='rotation')),
                ('seat_width', models.FloatField(help_text='Width in meters of a seat in this row.', verbose_name='seat width')),
                ('seat_height', models.FloatField(help_text='Height in meters of a seat in this row.', verbose_name='seat height')),
                ('seat_spacing_horizontal', models.FloatField(default=0, help_text='Spacing in meters between seats, horizontally.', verbose_name='horizontal seat spacing')),
                ('seat_spacing_vertical', models.FloatField(default=0, help_text='Spacing in meters between seats, vertically.', verbose_name='vertical seat spacing')),
                ('area_layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='row_layouts', to='seating.AreaLayout', verbose_name='area layout')),
            ],
        ),
        migrations.AddField(
            model_name='area',
            name='area_layout',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='areas', to='seating.AreaLayout', verbose_name='area layout'),
        ),
        migrations.AddField(
            model_name='area',
            name='seating',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='areas', to='seating.Seating', verbose_name='seating'),
        ),
        migrations.AddConstraint(
            model_name='seat',
            constraint=models.UniqueConstraint(fields=('area', 'row_number', 'seat_number'), name='unique_area_row_seat'),
        ),
        migrations.AddConstraint(
            model_name='seat',
            constraint=models.CheckConstraint(check=models.Q(('assigned_ticket__exact', None), ('is_reserved__exact', False), _connector='OR'), name='seat_not_reserved_and_assigned'),
        ),
        migrations.AddConstraint(
            model_name='rowtickettypes',
            constraint=models.UniqueConstraint(fields=('area', 'row_number', 'ticket_type'), name='unique_area_row_ticket_type'),
        ),
        migrations.AddIndex(
            model_name='rowlayout',
            index=models.Index(fields=['area_layout', 'row_number'], name='seating_row_area_la_a1d5e2_idx'),
        ),
        migrations.AddConstraint(
            model_name='rowlayout',
            constraint=models.UniqueConstraint(fields=('area_layout', 'row_number'), name='unique_layout_area_row_number'),
        ),
        migrations.AddConstraint(
            model_name='rowlayout',
            constraint=models.CheckConstraint(check=models.Q(row_number__gte=1), name='row_number_gte_1'),
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['seating', 'area_code'], name='seating_are_seating_a1433a_idx'),
        ),
        migrations.AddConstraint(
            model_name='area',
            constraint=models.UniqueConstraint(fields=('seating', 'area_code'), name='unique_seating_area_code'),
        ),
    ]
