# Generated by Django 2.2.2 on 2019-07-05 16:54

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('event', '0001_initial'),
        ('ticket', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': [('*', 'Seating app admin'), ('layout.*', 'Seating layout admin'), ('layout.list', 'List seating layouts'), ('layout.create', 'Create seating layouts'), ('layout.change', 'Change seating layouts'), ('layout.delete', 'Delete seating layouts'), ('layout.view_disabled', 'View disabled seating layouts'), ('layout.generate_image', 'Generate seating layout images'), ('seating.*', 'Seating admin'), ('seating.list', 'List seatings'), ('seat.*', 'Seat admin'), ('seat.create', 'Manually create seats'), ('seat.change', 'Manually change seats'), ('seat.delete', 'Manually delete seats'), ('seat.view_ticket', 'View tickets assigned to seats'), ('seat.view_hidden_user', 'View hidden users assigned to seats')],
                'managed': False,
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A non-unique title visible to users.', max_length=50, verbose_name='title')),
                ('area_code', models.CharField(help_text='Unique, non-empty area code for an area within a seating. Max 4 characters.', max_length=4, verbose_name='area code')),
                ('description', models.CharField(blank=True, help_text='A short area description for users.', max_length=100, verbose_name='description')),
            ],
        ),
        migrations.CreateModel(
            name='AreaLayout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A unique title.', max_length=50, unique=True, verbose_name='title')),
                ('is_enabled', models.BooleanField(default=False, help_text='If this layout is currently available to users.', verbose_name='is enabled')),
                ('width', models.FloatField(help_text='Width in meters of the area.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='width')),
                ('height', models.FloatField(help_text='Height in meters of the area.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='height')),
                ('background_url', models.URLField(blank=True, help_text='URL for the area background image containing walls, exits, etc.', verbose_name='background URL')),
            ],
        ),
        migrations.CreateModel(
            name='Seating',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='seating', serialize=False, to='event.Event', verbose_name='event')),
                ('is_enabled', models.BooleanField(default=False, help_text='If this seating is currently available to users.', verbose_name='is enabled')),
            ],
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.IntegerField(help_text='Row number within area.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='row number')),
                ('seat_number', models.IntegerField(help_text='Seat number within row. Horizontal-major seat numbering.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='seat number')),
                ('area', models.ForeignKey(help_text='Seating area.', on_delete=django.db.models.deletion.PROTECT, related_name='seats', to='seating.Area', verbose_name='area')),
                ('assigned_ticket', models.OneToOneField(blank=True, help_text='Ticket assigned to this seat.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='seat', to='ticket.Ticket', verbose_name='assigned ticket')),
            ],
            options={
                'default_permissions': ['view', 'change'],
            },
        ),
        migrations.CreateModel(
            name='RowTicketType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.IntegerField(help_text='Row number in the area layout.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='row number')),
                ('area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='row_ticket_types', to='seating.Area', verbose_name='area')),
                ('ticket_type', models.ForeignKey(help_text='A ticket type available for this seating row.', on_delete=django.db.models.deletion.CASCADE, related_name='applicable_rows', to='ticket.TicketType', verbose_name='ticket types')),
            ],
        ),
        migrations.CreateModel(
            name='RowLayout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.IntegerField(help_text='Unique, positive row number within the area.', validators=[django.core.validators.MinValueValidator(1)], verbose_name='row number')),
                ('description', models.CharField(blank=True, help_text='A short row description for users.', max_length=100, verbose_name='description')),
                ('seat_count_horizontal', models.IntegerField(help_text='Number of seats in the horizontal dimension (stacked on the non-wide sides of seats).', validators=[django.core.validators.MinValueValidator(1)], verbose_name='horizontal seat count')),
                ('seat_count_vertical', models.IntegerField(help_text='Number of seats in the vertical dimension (stacked on the wide sides of seats).', validators=[django.core.validators.MinValueValidator(1)], verbose_name='vertical seat count')),
                ('offset_horizontal', models.FloatField(default=0, help_text='Offset in meters from the left wrt. the area.', verbose_name='horizontal offset')),
                ('offset_vertical', models.FloatField(default=0, help_text='Offset in meters from the top wrt. the area.', verbose_name='vertical offset')),
                ('rotation', models.IntegerField(default=0, help_text='Counter-clockwise rotation in degrees wrt. the area. Must be in range [0, 360).', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(359)], verbose_name='rotation')),
                ('seat_width', models.FloatField(help_text='Width in meters of a seat in this row.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='seat width')),
                ('seat_height', models.FloatField(help_text='Height in meters of a seat in this row.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='seat height')),
                ('seat_spacing_horizontal', models.FloatField(default=0, help_text='Spacing in meters between seats, horizontally.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='horizontal seat spacing')),
                ('seat_spacing_vertical', models.FloatField(default=0, help_text='Spacing in meters between seats, vertically.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='vertical seat spacing')),
                ('area_layout', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='row_layouts', to='seating.AreaLayout', verbose_name='area layout')),
            ],
        ),
        migrations.AddField(
            model_name='area',
            name='area_layout',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='areas', to='seating.AreaLayout', verbose_name='area layout'),
        ),
        migrations.AddField(
            model_name='area',
            name='seating',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='areas', to='seating.Seating', verbose_name='seating'),
        ),
        migrations.AddConstraint(
            model_name='seat',
            constraint=models.UniqueConstraint(fields=('area', 'row_number', 'seat_number'), name='seating_seat_unique_area_row_seat'),
        ),
        migrations.AddConstraint(
            model_name='seat',
            constraint=models.CheckConstraint(check=models.Q(row_number__gte=1), name='seating_seat_row_number_gte_1'),
        ),
        migrations.AddConstraint(
            model_name='seat',
            constraint=models.CheckConstraint(check=models.Q(seat_number__gte=1), name='seating_seat_seat_number_gte_1'),
        ),
        migrations.AddConstraint(
            model_name='rowtickettype',
            constraint=models.UniqueConstraint(fields=('area', 'row_number', 'ticket_type'), name='seating_row_ticket_type_unique_area_row_ticket_type'),
        ),
        migrations.AddIndex(
            model_name='rowlayout',
            index=models.Index(fields=['area_layout', 'row_number'], name='seating_row_area_la_a1d5e2_idx'),
        ),
        migrations.AddConstraint(
            model_name='rowlayout',
            constraint=models.UniqueConstraint(fields=('area_layout', 'row_number'), name='seating_row_layout_unique_layout_area_row_number'),
        ),
        migrations.AddConstraint(
            model_name='rowlayout',
            constraint=models.CheckConstraint(check=models.Q(row_number__gte=1), name='seating_row_layout_row_number_gte_1'),
        ),
        migrations.AddIndex(
            model_name='area',
            index=models.Index(fields=['seating', 'area_code'], name='seating_are_seating_a1433a_idx'),
        ),
        migrations.AddConstraint(
            model_name='area',
            constraint=models.UniqueConstraint(fields=('seating', 'area_code'), name='seating_area_unique_area_code'),
        ),
    ]
