# Generated by Django 2.2.2 on 2019-07-05 16:54

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('event', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Permissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'permissions': [('*', 'Ticket app admin'), ('ticket_type.*', 'Ticket type admin'), ('ticket_type.list', 'List ticket types'), ('ticket_type.create', 'Create ticket types'), ('ticket_type.change', 'Change ticket types'), ('ticket_type.delete', 'Delete ticket types'), ('ticket_type.view_disabled', 'View disabled ticket types'), ('ticket.*', 'Ticket admin'), ('ticket.list_all', 'List all tickets'), ('ticket.view_all', 'View all tickets'), ('ticket.create', 'Manually create tickets'), ('ticket.change', 'Manually change tickets'), ('ticket.delete', 'Manually delete tickets')],
                'managed': False,
                'default_permissions': [],
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('simple_title', models.CharField(help_text='A short title for use within the context of an event. Must be unique within the event.', max_length=20, verbose_name='simple title')),
                ('unique_title', models.CharField(help_text='A unique version of the short title, for use outside the context of an event.', max_length=50, unique=True, verbose_name='unique title')),
                ('is_enabled', models.BooleanField(default=False, help_text='If this ticket type is not disabled.', verbose_name='is enabled')),
                ('visual_priority', models.IntegerField(default=10, help_text='Lower priority value shows it higher on the list among other ticket types.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='visual priority')),
                ('max_count', models.IntegerField(default=0, help_text='The max number of tickets of this type. If this is a seating ticke type, the actual max number is the minimum of this and the number of available seats for this type. 0 means unlimited.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='max count')),
                ('max_user_purchase_count', models.IntegerField(default=0, help_text='The max number of tickets a user may purchase. 0 means unlimited.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='max user purchase count')),
                ('max_user_assignment_count', models.IntegerField(default=1, help_text='The max number of tickets a user may be assigned. 0 means unlimited. Should be 1 for normal seating tickets.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='max user assignment count')),
                ('grants_entrance', models.BooleanField(default=True, help_text='If being assigned a ticket of this type grants entrance to the event.', verbose_name='grants entrance')),
                ('is_for_seating', models.BooleanField(default=True, help_text='If this is a seating ticket.', verbose_name='for seating')),
                ('valid_start_time', models.DateTimeField(blank=True, help_text='Start of the period this ticket type is valid for the event.', null=True, verbose_name='validity start time')),
                ('valid_end_time', models.DateTimeField(blank=True, help_text='End of the period this ticket type is valid for the event.', null=True, verbose_name='validity end time')),
                ('is_valid_all_event', models.BooleanField(default=True, help_text='If this ticket type is valid the entire event. Enabling this removes validity start and end time.', verbose_name='valid all event')),
                ('description', models.TextField(verbose_name='description')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ticket_types', to='event.Event', verbose_name='event')),
                ('required_ticket_type', models.ForeignKey(blank=True, help_text="If set, tickets of this type can't be assigned to a user before the user has a ticket of the other type assigned it first.", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='requiring_ticket_types', to='ticket.TicketType', verbose_name='required ticket type')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_code', models.CharField(blank=True, db_index=True, editable=False, help_text='A code used for transferring the ticket to another user by giving the other user the code. Can be regenerated.', max_length=50, verbose_name='transfer code')),
                ('assignee', models.ForeignKey(blank=True, help_text='The person using this ticket. If this is set, the ticket is activated.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='assignee')),
                ('attendance', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='event.Attendance', verbose_name='attendance')),
                ('owner', models.ForeignKey(default=None, help_text='The person owning and managing this ticket.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_tickets', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
                ('ticket_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tickets', to='ticket.TicketType', verbose_name='type')),
            ],
            options={
                'default_permissions': ['view', 'change'],
            },
        ),
        migrations.AddConstraint(
            model_name='tickettype',
            constraint=models.UniqueConstraint(fields=('simple_title', 'event'), name='ticket_ticket_type_unique_simple_title_event'),
        ),
        migrations.AddConstraint(
            model_name='tickettype',
            constraint=models.CheckConstraint(check=models.Q(('is_valid_all_event', True), ('valid_end_time__gt', django.db.models.expressions.F('valid_start_time')), _connector='OR'), name='ticket_tickettype_validity_ends_after_start'),
        ),
    ]
